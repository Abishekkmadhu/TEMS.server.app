// <auto-generated />
using System;
using Infrastructure.Presistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TravelDBContext))]
    partial class TravelDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredContactMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredTimeForContact")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Domain.Entities.CustomerPreferences", b =>
                {
                    b.Property<int>("CustomerPreferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPreferencesId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("GuidedTours")
                        .HasColumnType("bit");

                    b.Property<string>("PackageInclusions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredTourDuration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerPreferencesId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerPreferences");
                });

            modelBuilder.Entity("Domain.Entities.OtherInformation", b =>
                {
                    b.Property<int>("OtherInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OtherInformationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("HowDidYouHearAboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreviousCustomer")
                        .HasColumnType("bit");

                    b.HasKey("OtherInformationId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("OtherInformation");
                });

            modelBuilder.Entity("Domain.Entities.PackagePreference", b =>
                {
                    b.Property<int>("PackagePreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackagePreferenceId"));

                    b.Property<string>("AccommodationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BudgetRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("MealPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredActivities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportationPreference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackagePreferenceId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("PackagePreferences");
                });

            modelBuilder.Entity("Domain.Entities.SpecialRequirements", b =>
                {
                    b.Property<int>("SpecialRequirementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialRequirementsId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TravelInsurance")
                        .HasColumnType("bit");

                    b.HasKey("SpecialRequirementsId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("SpecialRequirements");
                });

            modelBuilder.Entity("Domain.Entities.TravelDetails", b =>
                {
                    b.Property<int>("TravelDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelDetailsId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FlexibleDates")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfInfants")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TravelPurpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TravelDetailsId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("TravelDetails");
                });

            modelBuilder.Entity("Domain.Entities.CustomerPreferences", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("CustomerPreferences")
                        .HasForeignKey("Domain.Entities.CustomerPreferences", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.OtherInformation", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("OtherInformation")
                        .HasForeignKey("Domain.Entities.OtherInformation", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.PackagePreference", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("PackagePreference")
                        .HasForeignKey("Domain.Entities.PackagePreference", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.SpecialRequirements", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("SpecialRequirements")
                        .HasForeignKey("Domain.Entities.SpecialRequirements", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.TravelDetails", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("TravelDetails")
                        .HasForeignKey("Domain.Entities.TravelDetails", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerPreferences")
                        .IsRequired();

                    b.Navigation("OtherInformation")
                        .IsRequired();

                    b.Navigation("PackagePreference")
                        .IsRequired();

                    b.Navigation("SpecialRequirements")
                        .IsRequired();

                    b.Navigation("TravelDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
